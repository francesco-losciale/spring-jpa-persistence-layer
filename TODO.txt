
- spring security must be used only at business logic level, stop to try to integrate SecurityContext and look for another solution
  about audit data writing (through the hibernate filter).

- logic delete must be handled such as updates or insert (ie. audit data)


- use 2nd level cache

- when you create and entity, the auditing data in all the child ones is missing - SaveEntityOperation.beforeSave should be called on child entity too
  to find out: 1. integrate spring security with user details accessible from anywhere in the code
               2. think about what is the best option between envers or hibernate interceptors
			   3. probably you'll use the interceptor to write auditing data
- tidy up EntityConverter.java
- add logging using spring aop and method's profiling
- write test unit
- add paginator
- read best-practices-orm.pdf, NB: the interceptors could be use to write auditing data (date_insert, user, etc)
- ILogicDeleteDTO and ILogicDelete are not so readable. Find out another solution.



docs:

https://thinkinginobjects.com/2012/08/26/dont-use-dao-use-repository/
best-practices-orm.pdf
schema-persistence.pdf